*** Settings ***
Library           Collections
Library           String
Library           DatabaseLibrary
Library           migu_library

*** Keywords ***
获取请求报文
    [Arguments]    ${Req_Data_File}    ${Random_Element}    @{Req_Data_Num}
    [Documentation]    用于从配置文件获取单条或多条请求报文，返回报文list
    ...
    ...    入参说明：
    ...
    ...    ${reqDataFile} 接口报文配置文件.conf后缀，使用工程相对路径，例如TestCases\\点播\\执行类接口\\余额鉴权.conf，引用测试套变量${Req_Data_File}。
    ...
    ...    ${randomElement} 报文里需要被替换成随机数的字段，
    ...    例如报文里的ORDER_ID需要替换成22位的随机数，ProcessTime需要替换成14位的随机数，变量值为
    ...    {"ORDER_ID":"0000000000000000000000-9999999999999999999999","ProcessTime":"2017000000000-20179999999999"}，报文配置文件里的字段值需要写成变量的形式：${ORDER_ID}，${ProcessTime}。
    ...
    ...    @{Req_Data_Num} 报文配置文件里的报文编号，例如Req_Data_01，可以同时指定多个。
    ...
    ...    出参说明：
    ...
    ...    ${req_data_list} 返回的请求报文list
    ...
    ...    ${randomvalue} 请求报文里替换的随机数的值，例如：{"ORDER_ID":"92345678912345643213456","ProcessTime":"20171234543445"}
    ...
    ...    示例：
    ...
    ...    | ${req_data_list} | ${randomvalue} | 获取请求报文 | ${Req_Data_File} | ${Random_Element} | Req_Data_01 | Req_Data_02 |
    ...
    ...    | ${req_data_list} | 获取请求报文 | ${Req_Data_File} | ${randomvalue} | Req_Data_001 |
    ...
    ...    返回结果引用示例：
    ...
    ...    | ${responsedata} | 发送请求报文 | ${G_OrderUrl} | post | xml | @{req_data_list}[0] |
    ${req_data_list}    ${randomElementValue}    Get Req Data List    ${Req_Data_File}    ${Random_Element}    @{Req_Data_Num}
    #替换请求报文时间为当前时间
    ${Current_time}    CommonLibrary Localtime    14
    ${Current_date}    CommonLibrary Localtime    8
    ${Code}    CommonLibrary Random Num And Str
    ${req_data_list}    Replace Request Data    ${req_data_list}    {"ProcessTime":"${Current_time}","REQUESTTIME":"${Current_time}","SettleDate":"${Current_date}","COOPERATECODE":"${Code}"}
    [Return]    ${req_data_list}    ${randomElementValue}

发送请求报文
    [Arguments]    ${serverUrl}    ${method}    ${dataformat}    @{requestData}
    [Documentation]    用于向服务器发送http请求报文，支持post和get两种请求，支持xml和json两种报文格式，返回服务器响应报文。
    ...
    ...    入参说明：
    ...
    ...    ${serverUrl}：服务器URL地址
    ...
    ...    ${method}：http方法，get或post
    ...
    ...    ${dataformat}：数据格式，json或xml
    ...
    ...    @{requestData}：请求报文，支持单个请求报文或者报文header和body分开两种格式。
    ...
    ...    示例：
    ...
    ...    | ${responsedata} | 发送请求报文 | ${G_OrderUrl} | post | xml | @{req_data_list}[0] |
    ${responseData}    CommonLibrary HttpInterface SendRequest    ${serverUrl}    ${method}    ${dataformat}    @{requestData}
    [Return]    ${responseData}

接口调用模板
    [Arguments]    ${serverUrl}    ${reqDataFile}    ${reqDataNum}    ${randomElement}
    [Documentation]    用于向服务器发送xml格式的POST请求。
    ...
    ...    入参说明：
    ...
    ...    ${serverUrl} 服务器URL地址，建议引用全局变量。
    ...
    ...    ${reqDataFile} 接口报文配置文件.conf后缀，使用全局变量+相对路径，例如${G_Path}\\计费\\TestCases\\点播\\计费请求接口.conf，引用测试套变量${Req_Data_File}。
    ...
    ...    ${reqDataNum} 接口报文配置文件里的报文编号，例如Req_Data_01
    ...
    ...    ${randomElement} 报文里需要被替换成随机数的字段，
    ...    例如报文里的ORDER_ID需要替换成22位的随机数，ProcessTime需要替换成14位的随机数，变量值为
    ...    {"ORDER_ID":"0000000000000000000000-9999999999999999999999","ProcessTime":"2017000000000-20179999999999"}，报文配置文件里的字段值需要写成变量的形式：${ORDER_ID}，${ProcessTime}。
    ...
    ...    返回结果说明：
    ...
    ...    ${responseData} ：服务器响应报文。
    ...
    ...    ${randomElementValue} ：报文里被替换的随机数字段，格式与入参${randomElement} 一致，例如{"ORDER_ID":"2345654321678943456786","ProcessTime":"20171234675325"}
    ...
    ...    示例：
    ...
    ...    | ${responseData} | ${randomElementValue} | 接口调用模板 | ${G_OrderUrl} | ${Req_Data_File} | Req_Data_01 | ${Random_Element} |
    #获取接口入参
    ${requestData}    ${randomElementValue}    Get Req Data    ${reqDataFile}    ${reqDataNum}    ${randomElement}
    #替换请求报文时间为当前时间
    ${Current_time}    CommonLibrary Localtime    14
    ${Current_date}    CommonLibrary Localtime    8
    ${requestData}    Replace Request Data    ${requestData}    {"ProcessTime":"${Current_time}","REQUESTTIME":"${Current_time}","SettleDate":"${Current_date}"}
    #调用接口
    ${responseData}    CommonLibrary HttpInterface Post Xml    ${serverUrl}    ${requestData}
    [Return]    ${responseData}    ${randomElementValue}

结果校验模板
    [Arguments]    ${responseData}    ${expectResult}    ${DBConnStr}    ${sqlStatement}=None    ${retry}=0    ${interval}=0
    ...    ${DBType}=cx_Oracle
    [Documentation]    用于xml格式响应报文的结果校验。
    ...
    ...    入参说明：
    ...
    ...    ${responseData} 接口返回结果，xml格式。
    ...
    ...    ${expectResult} 接口返回值的预期结果，字典格式，字典的key需要写清xml节点的路径，例如{"responseData/Body/resCode":"000000","responseData/Body/resDesc":"SUCCESS"}
    ...
    ...    ${DBConnStr} 数据库连接串，例如username/passwd@127.0.0.1:1521/oracle，如果不需要做数据库校验，输入None
    ...
    ...    ${sqlStatement} 数据库查询SQL语句及预期结果，字典格式，例如{"select username from table where userid='001'":"[['tom']]"}如果不需要做数据库校验，输入None
    ...
    ...    ${retry}：数据库校验最大重试时长或最大重试次数，默认时间0
    ...
    ...    ${interval}：数据库校验重试时间间隔，默认时间0
    ...
    ...    ${DBType}：数据库类型，默认值是cx_Oracle，也支持其他类型的数据库，例如mysql
    ...
    ...    示例（不需要进行数据库校验的）：
    ...
    ...    | 结果校验模板 | ${responseData} | {"GPay/Header/RspCode":"020A00"} | None | None |
    ...
    ...    示例（需要进行数据库校验且需要重试）：
    ...
    ...    | 结果校验模板 | ${responseData} | {"GPay/Header/RspCode":"020A00"} | ${G_DBConnStrMiguJF} | {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '&{randomvalue}[ORDER_ID]' union all select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '&{randomvalue}[ORDER_ID]'":"[('3001230123012301203')]"} | 5min | 30s |
    ...
    ...    示例（需要进行数据库校验不需要重试）：
    ...
    ...    | 结果校验模板 | ${responseData} | {"GPay/Header/RspCode":"020A00"} | ${G_DBConnStrMiguJF} | {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '&{randomvalue}[ORDER_ID]' union all select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '&{randomvalue}[ORDER_ID]'":"[('3001230123012301203')]"} |
    #接口返回结果处理
    ${responseDic}    CommonLibrary XmlStr To Dic    ${responseData}
    #接口返回结果校验
    Response Data Verify    ${responseDic}    ${expectResult}
    #数据库校验
    Run Keyword If    ${DBConnStr}!=None    数据库动态校验    ${DBConnStr}    ${sqlStatement}    ${retry}    ${interval}
    ...    ${DBType}

获取报文字段值
    [Arguments]    ${responseData}    ${element}    ${format}=xml
    [Documentation]    用于从XML或JSON格式的报文里获取指定节点的值。
    ...
    ...    入参说明：
    ...
    ...    ${responseData}：报文内容
    ...
    ...    ${element}：节点路径
    ...
    ...    ${format}：报文格式，xml 或 json，默认是xml
    ...
    ...    示例：
    ...
    ...    | ${value} | 获取报文字段值 | ${responseData} | ChargeResponse/Body/TradeSession |
    ...
    ...    | ${value} | 获取报文字段值 | ${responseData} | ChargeResponse/Body/TradeSession | json |
    #将报文转换为字典变量
    ${yesorno}    Run Keyword And Return Status    Should Be Equal As Strings    ${format}    xml    ignore_case=True
    ${responseDic}=    Run Keyword IF    ${yesorno}    CommonLibrary XmlStr To Dic    ${responseData}
    ...    ELSE    CommonLibrary JsonStr To Dic    ${responseData}
    #获取指定节点的value
    ${elementValue}    Get Response Data Value    ${responseDic}    ${element}
    [Return]    ${elementValue}

获取报文字段值序列
    [Arguments]    ${responseData}    ${format}=xml    @{elementList}
    [Documentation]    用于从XML或JSON格式的报文里获取指定节点的值，返回由节点值构成的List
    ...
    ...    入参说明：
    ...
    ...    ${responseData}：报文内容
    ...
    ...    ${format}：报文格式，xml 或 json，默认是xml
    ...
    ...    @{elementList}：节点List
    ...
    ...    示例：
    ...
    ...    | @{valueList} | 获取报文字段值序列 | ${responseData} | json | ChargeResponse/Body/TradeSession | ChargeResponse/Body/Order_ID |
    ...
    ...    | @{valueList} | 获取报文字段值序列 | ${responseData} | xml | ChargeResponse/Body/TradeSession | ChargeResponse/Body/Order_ID |
    ...
    ...    通过 @{valueList}[0] 和 @{valueList}[1] 可以分别引用到报文里 TradeSession 和 Order_ID 字段的值。
    #将报文转换为字典变量
    ${yesorno}    Run Keyword And Return Status    Should Be Equal As Strings    ${format}    xml    ignore_case=True
    ${responseDic}=    Run Keyword IF    ${yesorno}    CommonLibrary XmlStr To Dic    ${responseData}
    ...    ELSE    CommonLibrary JsonStr To Dic    ${responseData}
    #获取指定节点的value
    ${elementValueList}    Create List
    : FOR    ${element}    IN    @{elementList}
    \    ${elementValue}    Get Response Data Value    ${responseDic}    ${element}
    \    Append To List    ${elementValueList}    ${elementValue}
    [Return]    ${elementValueList}

数据库校验
    [Arguments]    ${DBConnStr}    ${sqlStatement}    ${DBType}=cx_Oracle
    [Documentation]    用于数据库校验，默认是Oracle数据库
    ...
    ...    入参说明：
    ...
    ...    ${DBConnStr}：数据库连接串，例如username/passwd@127.0.0.1:1521/orcl
    ...
    ...    ${sqlStatement}：数据库查询SQL语句及预期结果，字典格式，例如
    ...    {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '8739619410065812898203' union all select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '8739619410065812898203'":"[]"} 表示预期查询结果为空
    ...
    ...    {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '8739619410065812898203' union all select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '8739619410065812898203'":"[('30018283746272737646',)]"} 表示预期查询结果非空，需要注意的地方：如果只查询一个字段，预期结果里要在字段值后加上逗号。
    ...
    ...    同时也支持两个sql查询语句的结果做比较，例如
    ...    {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '0001707030956387995799'":"select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '0001707030956387995888'"}
    ...
    ...    ${DBType}：数据库类型，默认值是cx_Oracle，也支持其他类型的数据库，例如mysql
    ...
    ...    示例：
    ...
    ...    | 数据库校验 | ${DBConnStr} | ${sqlStatement} | mysql |
    ...
    ...    | 数据库校验 | ${DBConnStr} | ${sqlStatement} |
    #数据库校验
    Connect To Database Using Custom Params    ${DBType}    ${DBConnStr}
    ${sqlStatement}    CommonLibrary JsonStr To Dic    ${sqlStatement}
    ${keys}    Get Dictionary Keys    ${sqlStatement}
    : FOR    ${sql}    IN    @{keys}
    \    ${expect}    Get From Dictionary    ${sqlStatement}    ${sql}
    \    ${DBValue}    Query    ${sql}
    \    #如果expect是SQL语句,则把expect的执行结果赋值给expectvalue
    \    ${yesOrNo}    Run Keyword And Return Status    Should Match Regexp    ${expect}    select\\s*\\S*\\s*from\\s*\\S*
    \    ${expectValue}=    Run Keyword IF    ${yesOrNo}    Query    ${expect}
    \    ...    ELSE    Set Variable    ${expect}
    \    Should Be Equal As Strings    ${expectValue}    ${DBValue}
    \    Log    ExpectValue is the same with DB QueryValue
    Disconnect From Database

数据库动态校验
    [Arguments]    ${DBConnStr}    ${sqlStatement}    ${retry}    ${interval}    ${DBType}=cx_Oracle
    [Documentation]    数据库动态校验，用于数据入库时间不定或数据库生效有时延，需要多次重复查询的场景。
    ...
    ...    入参说明：
    ...
    ...    ${DBConnStr}：数据库连接串，例如username/passwd@127.0.0.1:1521/oracle
    ...
    ...    ${sqlStatement}：数据库查询SQL语句及预期结果，字典格式，例如
    ...
    ...    {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '8739619410065812898203' union all select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '8739619410065812898203'":"[('30018283746272737646',)]"}
    ...
    ...    ${retry}：可以设定为超时时长或重试次数，例如5 min或10 times
    ...
    ...    ${interval}：重试间隔，例如30s
    ...
    ...    ${DBType}：数据库类型，默认值是cx_Oracle，也支持其他类型的数据库，例如mysql
    ...
    ...    示例：
    ...
    ...    | 数据库动态校验 | ${G_DBConnStrMiguJF} | {"select t1.contentid from TG_FULL_CHARGE_TMP t1 where order_id = '0001707031000137995808' union all select t2.contentid from TG_FULL_CHARGE_his_07 t2 where order_id = '0001707031000137995808'":"[('3000000000060855997')]"} | 6 min | 30s |
    Comment    Wait Until Keyword Succeeds    ${retry}    ${interval}    数据库校验    ${DBConnStr}    ${sqlStatement}
    ...    ${DBType}
    CommonLibrary DB Dynamic Verify    ${DBConnStr}    ${sqlStatement}    ${retry}    ${interval}    ${DBType}

执行SQL语句
    [Arguments]    ${DBConnStr}    ${sqlStatement}    ${DBType}=cx_Oracle
    [Documentation]    用于执行指定的SQL语句。
    ...
    ...    入参说明：
    ...
    ...    ${DBConnStr}：数据库连接串，例如username/passwd@127.0.0.1:1521/orcl
    ...
    ...    ${sqlStatement}：要执行的SQL语句，例如DELETE FROM person_employee_table
    ...
    ...    ${DBType}：数据库类型，默认值是cx_Oracle，也支持其他类型的数据库，例如mysql
    ...
    ...    示例：
    ...
    ...    | 执行SQL语句 | ${DBConnStr} | DELETE FROM person_employee_table | mysql |
    ...
    ...    | 执行SQL语句 | ${DBConnStr} | DELETE FROM person_employee_table; DELETE FROM person_table |
    Connect To Database Using Custom Params    ${DBType}    ${DBConnStr}
    Execute Sql String    ${sqlStatement}
    Disconnect From Database

内容校验模板
    [Arguments]    ${result}    @{args}
    [Documentation]    用于校验指定对象中是否包含某个或某几个字符串
    ...
    ...    入参说明：
    ...
    ...    ${result} ：待校验的对象
    ...
    ...    @{args}：字符串序列
    ...
    ...    示例：
    ...
    ...    | 内容校验模板 | ${responseData} | HTTP Status 500 - cannt parse request | Apache Tomcat/9.0.0 |
    : FOR    ${arg}    IN    @{args}
    \    Should Contain    ${result}    ${arg}

文件内容校验
    [Arguments]    ${host}    ${username}    ${passwd}    ${port}    ${file_path}    ${file_name}
    ...    @{content}
    [Documentation]    用于校验服务器上某个文件是否包含指定内容
    ...
    ...    入参说明：
    ...
    ...    ${host}：服务器IP地址
    ...
    ...    ${username}：服务器用户名
    ...
    ...    ${passwd}：服务器密码
    ...
    ...    ${port}：端口，ssh端口22，telnet端口23
    ...
    ...    ${file_path}：文件路径
    ...
    ...    ${file_name}：文件名
    ...
    ...    @{content}：待校验的文件内容
    ...
    ...    示例：
    ...
    ...    | 文件内容校验 | ${G_Host} | ${G_UserName} | ${G_Passwd} | ${G_SSHPort} | /home/migu/data/log | order.log | 123123122312312321345 |
    #获取文件内容
    ${file_content}    CommonLibrary Linux Server Operate    ${host}    ${username}    ${passwd}    ${port}    cd ${file_path};cat ${file_name};
    #校验文件内容
    : FOR    ${arg}    IN    @{content}
    \    Should Contain    ${file_content}[0]    ${arg}

替换配置文件
    [Arguments]    ${host}    ${username}    ${passwd}    ${port}    ${server_file_path}    ${local_file_path}
    ...    ${file_name}
    [Documentation]    用于替换服务器的某个配置文件。
    ...
    ...    入参说明：
    ...
    ...    ${host}：服务器IP地址，建议使用全局变量。
    ...
    ...    ${username}：服务器用户名，建议使用全局变量。
    ...
    ...    ${passwd}：服务器密码，建议使用全局变量。
    ...
    ...    ${port}：端口，建议使用全局变量。
    ...
    ...    ${server_file_path}：服务器文件路径，建议使用全局变量。
    ...
    ...    ${local_file_path}：本地文件路径。
    ...
    ...    ${file_name}：文件名称
    ...
    ...    @{command}：上传配置文件后，服务器执行的命令
    ...
    ...    上传本地自动化工程目录下的配置文件，服务器相应路径下的同名文件改名为xxx.bak，然后执行命令，使新的配置文件生效。
    ...
    ...    示例：
    ...
    ...    | 替换配置文件 | ${G_Host} | ${G_UserName} | ${G_Passwd} | ${G_SSHPort} | ${G_ServerFilePath} | ${G_Path}\\计费\\Resources | test.xml |
    #备份老配置文件
    CommonLibrary Linux Server Move File    ${host}    ${username}    ${passwd}    ${server_file_path}/${file_name}    ${server_file_path}/${file_name}.bak    ${port}
    #上传新配置文件
    CommonLibrary Linux Server Upload File    ${host}    ${username}    ${passwd}    ${server_file_path}/${file_name}    ${local_file_path}/${file_name}    ${port}

恢复配置文件
    [Arguments]    ${host}    ${username}    ${passwd}    ${port}    ${server_file_path}    ${file_name}
    [Documentation]    用于恢复服务器的配置文件。
    ...
    ...    使用xxx.bak文件替换服务器某个路径下新上传的配置文件，然后执行命令，使配置文件生效，环境恢复到之前的配置，参数说明请参考替换配置文件。
    ...
    ...    入参说明：
    ...
    ...    ${G_Host}：服务器IP地址，建议使用全局变量。
    ...
    ...    ${G_UserName}：服务器用户名，建议使用全局变量。
    ...
    ...    ${G_Passwd}：服务器密码，建议使用全局变量。
    ...
    ...    ${G_SSHPort}: 服务端口号，建议使用全局变量。
    ...
    ...    ${G_ServerFilePath} : \ 服务路径，建议使用全局变量。
    ...
    ...    示例：
    ...
    ...    | 恢复配置文件 | ${G_Host} | ${G_UserName} | ${G_Passwd} | ${G_SSHPort} | ${G_ServerFilePath} | test.xml |
    #删除新配置文件
    CommonLibrary Linux Server Delete File    ${host}    ${username}    ${passwd}    ${server_file_path}/${file_name}    ${port}
    #恢复老配置文件
    CommonLibrary Linux Server Move File    ${host}    ${username}    ${passwd}    ${server_file_path}/${file_name}.bak    ${server_file_path}/${file_name}    ${port}

配置文件生效
    [Arguments]    ${host}    ${username}    ${passwd}    ${port}    ${command}    ${expect}
    [Documentation]    用于替换配置文件后，服务器执行某个命令，使配置文件生效。
    ...
    ...    入参说明：
    ...
    ...    ${host}：服务器IP地址，建议使用全局变量。
    ...
    ...    ${username}：服务器用户名，建议使用全局变量。
    ...
    ...    ${passwd}：服务器密码，建议使用全局变量。
    ...
    ...    ${port}：端口，建议使用全局变量。
    ...
    ...    ${command}：上传配置文件后，为了使文件生效，服务器需要执行的命令。
    ...
    ...    ${expect}：服务器执行命令后，预期的返回结果。
    ...
    ...    示例：
    ...
    ...    | 配置文件生效 | ${G_Host} | ${G_UserName} | ${G_Passwd} | ${G_SSHPort} | cd /home/migu/user/chenm/loadfile2zk;java -cp /home1/migu/migu/libs/*:loadfile2zk.jar loadfile2zk.Loadfile2zk 10.25.212.22:2181 /migu/param/billing-month billing-month.xml | Success |
    #配置文件生效
    ${result}    CommonLibrary Linux Server Operate    ${host}    ${username}    ${passwd}    ${port}    ${command}
    Should Contain    @{result}[0]    ${expect}

构造预置数据模板
    [Arguments]    ${DBType}    ${DBConnStr}    ${RandomElement}
    [Documentation]    用于预置数据库测试数据，根据不同的业务场景，完成insert into语句的编写，需要将该关键字复制到对应中心的业务逻辑关键字中。如果insert into语句不需要使用随机数，删除出入参的${RandomElement}以及 #生成指定字段对应的随机数 部分即可。
    ...
    ...    入参说明：
    ...
    ...    ${DBType}：数据库类型，例如cx_Oracle、mysql
    ...
    ...    ${DBConnStr} ：数据库连接串，例如migu_jf/migu_jf@10.25.212.19:1521/orcl，建议使用全局变量
    ...
    ...    ${RandomElement}：后面的insert into语句中需要使用随机数替换的字段，使用字典格式，例如{"ORDER_ID":"00000-99999","ContentID":"00000-99999"}
    ...
    ...    返回值：
    ...
    ...    入参${RandomElement}中对应字段被替换为随机数后的json字符串，例如
    ...    {"ORDER_ID": 800542713, "ContentID" : 23432}
    ...
    ...    示例：
    ...
    ...    | ${randomvalue} | 构造预置数据模板 | cx_Oracle | ${G_DBConnStrMiguJF} | ${Random_Element} |
    ...
    ...    | ${req_data_list} | 获取请求报文 | ${Req_Data_File} | ${randomvalue} | Req_Data_001 |
    Connect To Database Using Custom Params    ${DBType}    ${DBConnStr}
    #生成指定字段对应的随机数
    ${RandomElement}    CommonLibrary JsonStr To Dic    ${RandomElement}
    @{keys}    Get Dictionary Keys    ${RandomElement}
    : FOR    ${key}    IN    @{keys}
    \    ${value}    Get From Dictionary    ${RandomElement}    ${key}
    \    ${start}    ${end}    Split String    ${value}    -
    \    ${randomvalue}    Evaluate    random.randint(${start}, ${end})    modules=random, sys
    \    ${randomvalue}    Convert To String    ${randomvalue}
    \    Set To Dictionary    ${RandomElement}    ${key}    ${randomvalue}
    #执行数据预置操作
    Execute Sql String    insert into TG_CDR_MONTH_HIS08 (ORDER_ID, TRADESESSION, PHONENUMBER, OPER_CODE, OPER_CHANNEL, OPER_TIME, EFFECT_TIME, SP_CODE, SP_SERV_CODE, CHANNEL_CODE, EXTEND_ATTR, AMOUNT, LAUNCH_TYPE, OLD_PHONENUMBER, BIZTYPE, BOSS_SEQ, REC_TIME, KAFKA_REC_TIME, MONTH_MSG_TYPE, COMPANY_MSG_TYPE, RESULT_CODE, RESULT_DESC, BATCH_ID, OPER_MONTH, RESERVED1, RESERVED2, RESERVED3, RESERVED4, RESERVED5, RESERVED6, RESERVED7, RESERVED8, RESERVED9, RESERVED10, RESERVED11, RESERVED12, RESERVED13, RESERVED14, RESERVED15, RESERVED16, RESERVED17, RESERVED18, RESERVED19) values (&{RandomElement}[ORDER_ID], '0238BIP5A13420170728100440480828', '13934919667', '01', '02', '20170728100440', '20170728100440', '698038', '80000000000100005937', '8800', 'testshaoyan0728', '600', '1', null, null, null, '20170728100440826', '20170728100441068', '01', '01', '4807', 'PROVICE SERVICE UNSUPPORTED', '9920170728100855000001', '07', '1', '20170728100855', '0', null, null, '0', '01', null, null, null, null, null, null, null, null, null, null, null, null)
    ${RandomElement}    CommonLibrary Dic To JsonStr    ${RandomElement}
    Disconnect From Database
    [Return]    ${RandomElement}

清理预置数据模板
    [Arguments]    ${DBType}    ${DBConnStr}    ${RandomElement}
    [Documentation]    用于清理数据库预置的测试数据，根据不同的业务场景，完成delete from语句的编写，需要将该关键字复制到对应中心的业务逻辑关键字中。如果预置的测试数据不涉及随机数，删除入参${RandomElement}即可。
    ...
    ...    入参说明：
    ...
    ...    ${DBType}：数据库类型，例如cx_Oracle、mysql
    ...
    ...    ${DBConnStr} ：数据库连接串，例如migu_jf/migu_jf@10.25.212.19:1521/orcl，建议使用全局变量
    ...
    ...    ${RandomElement}：delete from语句中需要使用随机数替换的字段，直接使用构造预置数据模板的返回值。
    ...
    ...    示例：
    ...
    ...    | ${randomvalue} | 构造预置数据模板 | cx_Oracle | ${G_DBConnStrMiguJF} | ${Random_Element} |
    ...
    ...    | 清理预置数据模板 | cx_Oracle | ${G_DBConnStrMiguJF} | ${randomvalue} |
    Connect To Database Using Custom Params    ${DBType}    ${DBConnStr}
    #将json串转化为字典
    ${RandomElement}    CommonLibrary JsonStr To Dic    ${RandomElement}
    #执行数据清理操作
    Execute Sql String    delete from TG_CDR_MONTH_HIS08 where ORDER_ID = '&{RandomElement}[ORDER_ID]'
    Disconnect From Database

替换服务器文件内容
    [Arguments]    ${host}    ${username}    ${passwd}    ${port}    ${file_path}    ${file_name}
    ...    ${content_str}
    [Documentation]    用于替换服务器上某个文件中的指定内容
    ...
    ...    入参说明：
    ...
    ...    ${host}：服务器IP地址
    ...
    ...    ${username}：服务器用户名
    ...
    ...    ${passwd}：服务器密码
    ...
    ...    ${port}：端口，ssh端口22，telnet端口23
    ...
    ...    ${file_path}：文件路径
    ...
    ...    ${file_name}：文件名
    ...
    ...    ${content_str}：待替换的文件内容
    ...
    ...    出参说明：
    ...
    ...    ${Code}: \ 返回替换的文件内容字符串，主要用于数据库中唯一记录校验，如合作伙伴编码：mIroIo3Imtvtc85oJb5EWa
    ...
    ...    示例：
    ...    ${Code} \ | 替换服务器文件内容 | ${G_Host} | ${G_UserName} | ${G_Passwd} | ${G_SSHPort} | /home/migujsj/incoming/MGBDC/010 | 010_COOPERATEINFO_20170905.206 | CooperateCode |
    ${Code}    CommonLibrary Random Num And Str
    CommonLibrary Linux Server Operate    ${host}    ${username}    ${passwd}    ${port}    cd ${file_path};sed -i "s/${content_str}/${Code}/g" ${file_name};
    [Return]    ${Code}

修改服务器文件名
    [Arguments]    ${host}    ${username}    ${passwd}    ${port}    ${filename_str}    ${file_path}
    ...    ${file_name}
    [Documentation]    用于修改服务器上某个文件的名称，日期和文件编号
    ...
    ...    入参说明：
    ...
    ...    ${host}：服务器IP地址
    ...
    ...    ${username}：服务器用户名
    ...
    ...    ${passwd}：服务器密码
    ...
    ...    ${port}：端口，ssh端口22，telnet端口23
    ...
    ...    ${filename_str}：文件名前缀
    ...
    ...    ${file_path}：文件路径
    ...
    ...    ${file_name}：文件名
    ...
    ...    出参说明：
    ...
    ...    ${filename_new}: \ 返回修改后的新文件名，主要用于文件名修改成功的校验，以及回执文件的生成校验，如回执文件：E_${filename_new}
    ...
    ...
    ...    示例：
    ...
    ...    ${filename_new} | 修改服务器文件名 | ${G_Host} | ${G_UserName} | ${G_Passwd} | ${G_SSHPort} | 010_COOPERATEINFO_ | /home/migujsj/incoming/MGBDC/010 | 010_COOPERATEINFO_20170905.206
    @{time}    CommonLibrary Linux Server Get Time    ${host}    ${username}    ${passwd}    ${port}
    ${num}    CommonLibrary Get Filenumber
    ${filename_new}    Set Variable    ${filename_str}@{time}[0]@{time}[1]@{time}[2]${num}
    CommonLibrary Linux Server Operate    ${host}    ${username}    ${passwd}    ${port}    cd ${file_path};mv ${filename} ${filename_new}
    [Return]    ${filename_new}

数据库清理
    [Arguments]    ${DBConnStr}    ${DBType}    @{sqlStatement}
    [Documentation]    用于清理数据库垃圾数据。
    ...
    ...    入参说明：
    ...
    ...    ${DBConnStr}：数据库连接串信息
    ...
    ...    ${DBType}：数据库类型，例如cx_Oracle、mysql
    ...
    ...    @{sqlStatement}：清理SQL语句，支持多个。
    ...
    ...    示例：
    ...
    ...    | 数据库清理 | ${G_DBConnStrMiguJSJ} | cx_Oracle | delete from TD_BU_CPINFO t1 where t1.SEND_AQGK_TAG = 2 and t1.subcpcode = '010' and t1.cooperatecode = '${CooperateCode}' | delete from TD_BU_CPINFO_MOD t1 where t1.subcpcode = '010' and t1.cooperatecode = '${CooperateCode}' |
    Connect To Database Using Custom Params    ${DBType}    ${DBConnStr}
    : FOR    ${sql}    IN    @{sqlStatement}
    \    Execute Sql String    ${sql}
    Disconnect From Database

环境清理
    [Documentation]    用于清理环境垃圾数据。
    ...
    ...    入参说明：
    ...
    ...    ${DBConnStr}：数据库连接串信息
    ...
    ...    ${DBType}：数据库类型，例如cx_Oracle、pymysql
    ...
    ...    @{sqlStatement}：清理SQL语句，支持多个。
    ...
    ...    示例：
    ...
    ...    | 数据库清理 | ${G_DBConnStrMiguJSJ} | cx_Oracle | delete from TD_BU_CPINFO t1 where t1.SEND_AQGK_TAG = 2 and t1.subcpcode = '010' and t1.cooperatecode = '${CooperateCode}' | delete from TD_BU_CPINFO_MOD t1 where t1.subcpcode = '010' and t1.cooperatecode = '${CooperateCode}' |
    #断开数据库连接
    Run Keyword And Ignore Error    Disconnect From Database
    #其他
